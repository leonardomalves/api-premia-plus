{
	"info": {
		"_postman_id": "o1r2d3e4-c5a6-7890-shop-123456789012",
		"name": "Pr√™mia Club - Orders & Cart",
		"description": "API de pedidos, carrinho de compras e gest√£o de tickets do sistema Pr√™mia Club.\n\n## Funcionalidades\n- Gest√£o de carrinho de compras\n- Processamento de pedidos\n- Compra de tickets de rifas\n- Hist√≥rico de compras\n- Status de pagamento\n\n## Autentica√ß√£o\nTodos os endpoints requerem:\n```\nAuthorization: Bearer {token}\n```\n\n## Dom√≠nios Relacionados\n- Users (propriet√°rio do pedido)\n- Raffles (tickets comprados)\n- Commissions (geradas pelas compras)\n- Wallets (pagamentos)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "üõí Shopping Cart",
			"item": [
				{
					"name": "Get Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Cart structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status', 'success');",
									"    pm.expect(jsonData.data).to.have.property('cart');",
									"    pm.expect(jsonData.data.cart).to.have.property('items');",
									"    pm.expect(jsonData.data.cart).to.have.property('total');",
									"});",
									"",
									"pm.test(\"Store cart UUID\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.cart && jsonData.data.cart.uuid) {",
									"        pm.environment.set(\"cart_uuid\", jsonData.data.cart.uuid);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/customer/cart",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"customer",
								"cart"
							]
						}
					},
					"response": [
						{
							"name": "200 - Cart Retrieved",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/customer/cart",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"cart"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"success\",\n  \"message\": \"Carrinho carregado com sucesso.\",\n  \"data\": {\n    \"cart\": {\n      \"uuid\": \"cart-123e4567-e89b-12d3-a456-426614174000\",\n      \"items\": [\n        {\n          \"raffle_uuid\": \"raffle-456\",\n          \"raffle_title\": \"iPhone 15 Pro Max\",\n          \"ticket_quantity\": 5,\n          \"ticket_price\": 2.50,\n          \"subtotal\": 12.50\n        }\n      ],\n      \"total_items\": 5,\n      \"total_amount\": 12.50,\n      \"expires_at\": \"2024-10-30T16:00:00.000000Z\"\n    }\n  },\n  \"meta\": {\n    \"execution_time_ms\": 23.45\n  }\n}"
						}
					]
				},
				{
					"name": "Add Item to Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Item added successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status', 'success');",
									"    pm.expect(jsonData.data).to.have.property('cart');",
									"    pm.expect(jsonData.data.cart).to.have.property('items');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"raffle_uuid\": \"{{raffle_uuid}}\",\n  \"ticket_quantity\": 10\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/customer/cart/items",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"customer",
								"cart",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Remove Item from Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Item removed successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status', 'success');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/customer/cart/items/{{raffle_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"customer",
								"cart",
								"items",
								"{{raffle_uuid}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Gest√£o do carrinho de compras do usu√°rio."
		},
		{
			"name": "üì¶ Orders",
			"item": [
				{
					"name": "Create Order from Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Order created successfully\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status', 'success');",
									"    pm.expect(jsonData.data).to.have.property('order');",
									"    pm.expect(jsonData.data.order).to.have.property('uuid');",
									"    pm.expect(jsonData.data.order).to.have.property('total');",
									"});",
									"",
									"pm.test(\"Store order UUID\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.data && jsonData.data.order && jsonData.data.order.uuid) {",
									"        pm.environment.set(\"order_uuid\", jsonData.data.order.uuid);",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"payment_method\": \"pix\",\n  \"apply_wallet_balance\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/customer/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"customer",
								"orders"
							]
						}
					},
					"response": [
						{
							"name": "201 - Order Created",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"payment_method\": \"pix\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/customer/orders",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"v1",
										"customer",
										"orders"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"status\": \"success\",\n  \"message\": \"Pedido criado com sucesso.\",\n  \"data\": {\n    \"order\": {\n      \"uuid\": \"order-123e4567-e89b-12d3-a456-426614174000\",\n      \"status\": \"pending_payment\",\n      \"total\": 12.50,\n      \"payment_method\": \"pix\",\n      \"items\": [\n        {\n          \"raffle_title\": \"iPhone 15 Pro Max\",\n          \"tickets_quantity\": 5,\n          \"unit_price\": 2.50,\n          \"subtotal\": 12.50\n        }\n      ],\n      \"payment_info\": {\n        \"pix_code\": \"00020126...\",\n        \"qr_code_url\": \"https://api.premiaclub.com.br/qr/order-123...\",\n        \"expires_at\": \"2024-10-30T16:00:00.000000Z\"\n      }\n    }\n  },\n  \"meta\": {\n    \"execution_time_ms\": 234.56\n  }\n}"
						}
					]
				},
				{
					"name": "Get Order Details",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Order details structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status', 'success');",
									"    pm.expect(jsonData.data).to.have.property('order');",
									"    pm.expect(jsonData.data.order).to.have.property('uuid');",
									"    pm.expect(jsonData.data.order).to.have.property('status');",
									"    pm.expect(jsonData.data.order).to.have.property('items');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/customer/orders/{{order_uuid}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"customer",
								"orders",
								"{{order_uuid}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "List My Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Orders list structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status', 'success');",
									"    pm.expect(jsonData.data).to.have.property('orders');",
									"    pm.expect(jsonData.data.orders).to.have.property('data');",
									"    pm.expect(jsonData.data.orders).to.have.property('meta');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/customer/orders?page=1&per_page=10&status=all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"customer",
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "10"
								},
								{
									"key": "status",
									"value": "all"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Gest√£o de pedidos e compras."
		},
		{
			"name": "üîß Admin - Orders Management",
			"item": [
				{
					"name": "List All Orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Admin orders list structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status', 'success');",
									"    pm.expect(jsonData.data).to.have.property('orders');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/administrator/orders?page=1&per_page=25&status=all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"administrator",
								"orders"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "per_page",
									"value": "25"
								},
								{
									"key": "status",
									"value": "all"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Order Status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Order status updated\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('status', 'success');",
									"    pm.expect(jsonData.data).to.have.property('order');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"status\": \"paid\",\n  \"admin_notes\": \"Pagamento confirmado manualmente\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/administrator/orders/{{order_uuid}}/status",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"v1",
								"administrator",
								"orders",
								"{{order_uuid}}",
								"status"
							]
						}
					},
					"response": []
				}
			],
			"description": "Endpoints administrativos para gest√£o de pedidos. Requer permiss√£o de admin."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"pm.request.headers.add({",
					"    key: 'Accept',",
					"    value: 'application/json'",
					"});",
					"",
					"// Set default base URL if not set",
					"if (!pm.environment.get(\"base_url\")) {",
					"    pm.environment.set(\"base_url\", \"http://localhost:8000\");",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test(\"Response is JSON\", function () {",
					"    pm.response.to.be.json;",
					"});",
					"",
					"pm.test(\"No server errors (5xx)\", function () {",
					"    pm.expect(pm.response.code).to.be.below(500);",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "domain",
			"value": "orders",
			"type": "string"
		}
	]
}