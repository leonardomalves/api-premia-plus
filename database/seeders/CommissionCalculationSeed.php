<?php

namespace Database\Seeders;

use App\Models\Commission;
use App\Models\Order;
use App\Models\User;
use Illuminate\Database\Seeder;

class CommissionCalculationSeed extends Seeder
{
    /**
     * Profundidade configur√°vel para buscar uplines
     */
    private $maxLevels = 3;

    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('üí∞ Iniciando c√°lculo de comiss√µes...');

        // Buscar todas as orders aprovadas
        $orders = Order::where('status', 'approved')
            ->with(['user', 'plan'])
            ->get();

        if ($orders->isEmpty()) {
            $this->command->warn('‚ö†Ô∏è Nenhuma order aprovada encontrada. Execute primeiro o seeder de orders.');

            return;
        }

        $this->command->info("üìä Processando {$orders->count()} orders aprovadas...");

        foreach ($orders as $order) {
            $this->calculateCommissions($order);
        }

        $this->command->info('‚úÖ C√°lculo de comiss√µes conclu√≠do!');
    }

    /**
     * Calcula comiss√µes para uma order espec√≠fica
     */
    private function calculateCommissions(Order $order): void
    {
        $buyer = $order->user;
        $planMetadata = $order->plan_metadata;

        $this->command->info("üõí Processando order do usu√°rio: {$buyer->name} (Plano: {$planMetadata['name']})");

        // Buscar uplines at√© o n√≠vel configurado
        $uplines = $this->getUplines($buyer, $this->maxLevels);

        if (empty($uplines)) {
            $this->command->warn("   ‚ö†Ô∏è Nenhum upline encontrado para {$buyer->name}");

            return;
        }

        // Calcular comiss√µes para cada n√≠vel
        foreach ($uplines as $level => $upline) {
            $this->calculateLevelCommission($order, $upline, $level + 1, $planMetadata);
        }
    }

    /**
     * Busca uplines com profundidade configur√°vel
     */
    private function getUplines(User $user, int $maxLevels): array
    {
        $uplines = [];
        $currentUser = $user;
        $level = 0;

        while ($level < $maxLevels && $currentUser->sponsor_id) {
            $sponsor = User::find($currentUser->sponsor_id);

            if (! $sponsor) {
                break;
            }

            $uplines[$level] = $sponsor;
            $currentUser = $sponsor;
            $level++;
        }

        return $uplines;
    }

    /**
     * Calcula comiss√£o para um n√≠vel espec√≠fico
     */
    private function calculateLevelCommission(Order $order, User $upline, int $level, array $planMetadata): void
    {
        $commissionRate = $this->getCommissionRateFromMetadata($planMetadata, $level);

        if ($commissionRate <= 0) {
            $this->command->warn("   ‚ö†Ô∏è Taxa de comiss√£o zero para n√≠vel {$level}");

            return;
        }

        $planPrice = (float) $planMetadata['price'];
        $commissionAmount = $planPrice * ($commissionRate / 100);

        $this->command->info("   üí∞ N√≠vel {$level}: {$upline->name} - R$ ".number_format($commissionAmount, 2, ',', '.')." ({$commissionRate}%)");

        // Aqui voc√™ pode salvar a comiss√£o no banco de dados
        // Exemplo: Commission::create([...])
        $this->saveCommission($order, $upline, $level, $commissionAmount, $commissionRate);
    }

    /**
     * Obt√©m a taxa de comiss√£o baseada nos metadados do plano e n√≠vel
     */
    private function getCommissionRateFromMetadata(array $planMetadata, int $level): float
    {
        return match ($level) {
            1 => (float) $planMetadata['commission_level_1'],
            2 => (float) $planMetadata['commission_level_2'],
            3 => (float) $planMetadata['commission_level_3'],
            default => 0.0
        };
    }

    /**
     * Salva a comiss√£o calculada usando updateOrCreate para evitar duplica√ß√£o
     */
    private function saveCommission(Order $order, User $upline, int $level, float $amount, float $rate): void
    {
        // Usar updateOrCreate para evitar duplica√ß√£o
        $commission = Commission::updateOrCreate(
            [
                'order_id' => $order->id,
                'user_id' => $upline->id,
                'origin_user_id' => $order->user_id,
            ],
            [
                'amount' => $amount,
                'available_at' => now()->addDays(30), // Dispon√≠vel em 30 dias
            ]
        );

        $this->command->info("   üìù Comiss√£o salva: {$upline->name} - N√≠vel {$level} - R$ ".number_format($amount, 2, ',', '.')." ({$rate}%)");

        if ($commission->wasRecentlyCreated) {
            $this->command->info("   ‚úÖ Nova comiss√£o criada (ID: {$commission->id})");
        } else {
            $this->command->info("   üîÑ Comiss√£o atualizada (ID: {$commission->id})");
        }
    }

    /**
     * Configura a profundidade m√°xima de uplines
     */
    public function setMaxLevels(int $levels): self
    {
        $this->maxLevels = $levels;

        return $this;
    }

    /**
     * Exibe estat√≠sticas das comiss√µes
     */
    public function showStatistics(): void
    {
        $this->command->info('üìà Estat√≠sticas de Comiss√µes:');
        $this->command->info("   - Profundidade configurada: {$this->maxLevels} n√≠veis");
        $this->command->info('   - Orders processadas: '.Order::where('status', 'approved')->count());
        $this->command->info('   - Usu√°rios com uplines: '.User::whereNotNull('sponsor_id')->count());

        // Estat√≠sticas das comiss√µes
        $totalCommissions = Commission::count();
        $totalAmount = Commission::sum('amount');
        $paidCommissions = Commission::where('paid', true)->count();
        $availableCommissions = Commission::where('available_at', '<=', now())->where('paid', false)->count();

        $this->command->info('üí∞ Estat√≠sticas de Comiss√µes Salvas:');
        $this->command->info("   - Total de comiss√µes: {$totalCommissions}");
        $this->command->info('   - Valor total: R$ '.number_format($totalAmount, 2, ',', '.'));
        $this->command->info("   - Comiss√µes pagas: {$paidCommissions}");
        $this->command->info("   - Comiss√µes dispon√≠veis: {$availableCommissions}");

        // Mostrar exemplo de metadados de plano
        $order = Order::where('status', 'approved')->first();
        if ($order && $order->plan_metadata) {
            $this->command->info('üì¶ Exemplo de metadados de plano:');
            $this->command->info("   - Nome: {$order->plan_metadata['name']}");
            $this->command->info('   - Pre√ßo: R$ '.number_format($order->plan_metadata['price'], 2, ',', '.'));
            $this->command->info("   - Comiss√£o N√≠vel 1: {$order->plan_metadata['commission_level_1']}%");
            $this->command->info("   - Comiss√£o N√≠vel 2: {$order->plan_metadata['commission_level_2']}%");
            $this->command->info("   - Comiss√£o N√≠vel 3: {$order->plan_metadata['commission_level_3']}%");
        }
    }
}
