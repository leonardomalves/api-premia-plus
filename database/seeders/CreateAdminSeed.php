<?php

namespace Database\Seeders;

use App\Services\Core\HttpClient;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class CreateAdminSeed extends Seeder
{
    private $baseUrl = 'http://localhost:8000/api/v1';
    private $adminToken = null;

    /**
     * Verificar se o servidor Laravel est√° rodando
     */
    private function checkServerRunning(): bool
    {
        $this->command->info('üîç Verificando se o servidor Laravel est√° rodando...');
        
        try {
            $context = stream_context_create([
                'http' => [
                    'timeout' => 3,
                    'method' => 'GET',
                ]
            ]);
            
            $response = @file_get_contents('http://localhost:8000', false, $context);
            
            if ($response !== false) {
                $this->command->info('‚úÖ Servidor Laravel est√° rodando na porta 8000');
                return true;
            } else {
                $this->command->error('‚ùå Servidor Laravel n√£o est√° respondendo na porta 8000');
                return false;
            }
        } catch (\Exception $e) {
            $this->command->error("‚ùå Erro ao verificar servidor: {$e->getMessage()}");
            return false;
        }
    }

    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('üöÄ Iniciando cria√ß√£o dos usu√°rios administradores via API...');

        // Verificar se o servidor est√° rodando
        if (!$this->checkServerRunning()) {
            $this->command->error('‚ùå Servidor Laravel n√£o est√° rodando.');
            $this->command->warn('üí° Execute em outro terminal: php artisan serve');
            $this->command->warn('üí° Ou verifique se o servidor est√° rodando na porta 8000');
            return;
        }

        // Verificar se a API est√° dispon√≠vel
        if (!$this->checkApiHealth()) {
            $this->command->error('‚ùå API n√£o est√° dispon√≠vel. Verifique as rotas da API.');
            return;
        }

        // Criar m√∫ltiplos administradores
        $this->createAdminUsers();
        
        // Fazer login do admin principal para obter token
        $this->loginMainAdmin();
        
        // Verificar configura√ß√£o dos admins
        $this->checkAdminsConfiguration();

        $this->command->info('‚úÖ Administradores criados com sucesso via API!');
    }

    /**
     * Verificar se a API est√° dispon√≠vel
     */
    private function checkApiHealth(): bool
    {
        $this->command->info('üîç Verificando disponibilidade da API...');
        
        try {
            $response = (new HttpClient())->apiRequest("{$this->baseUrl}/health", [], [], 'GET');
            
            if ($response->status == 200) {
                $this->command->info('‚úÖ API est√° dispon√≠vel e respondendo');
                return true;
            } else {
                $this->command->warn("‚ö†Ô∏è API respondeu com status: {$response->status}");
                return false;
            }
        } catch (\Exception $e) {
            $this->command->error("‚ùå Erro ao conectar com a API: {$e->getMessage()}");
            return false;
        }
    }

    /**
     * Criar m√∫ltiplos usu√°rios admin via API
     */
    private function createAdminUsers(): void
    {
        $admins = $this->getAdminProfiles();
        $successCount = 0;
        $errorCount = 0;

        foreach ($admins as $index => $admin) {
            $this->command->info("üë§ Criando admin: {$admin['name']}...");

            try {
                $response = (new HttpClient())->apiRequest("{$this->baseUrl}/register", $admin, [], 'POST');

                if ($response->status == 200 || $response->status == 201) {
                    $this->command->info("‚úÖ {$admin['name']} criado com sucesso!");
                    $successCount++;
                    
                    // Armazenar token do primeiro admin (principal) para usar nos testes
                    if ($index === 0) {
                        $this->adminToken = $response->content->access_token ?? null;
                    }
                } else {
                    $this->handleAdminCreationError($admin, $response);
                    $errorCount++;
                }
            } catch (\Exception $e) {
                $this->command->error("‚ùå Exce√ß√£o ao criar {$admin['name']}: {$e->getMessage()}");
                $errorCount++;
            }

            // Pequena pausa entre cria√ß√µes
            usleep(200000); // 0.2 segundo
        }

        // Resumo da cria√ß√£o
        $total = count($admins);
        $this->command->info("üìä Resumo: {$successCount}/{$total} admins criados com sucesso");
        
        if ($errorCount > 0) {
            $this->command->warn("‚ö†Ô∏è {$errorCount} admin(s) falharam na cria√ß√£o");
        }
    }

    /**
     * Tratar erro na cria√ß√£o de admin
     */
    private function handleAdminCreationError(array $admin, object $response): void
    {
        $this->command->error("‚ùå Erro ao criar {$admin['name']}:");
        
        if ($response->status === 0) {
            $this->command->error('  ‚Ä¢ Problema de conectividade - verifique se a API est√° rodando');
            $this->command->warn('  ‚Ä¢ Execute: php artisan serve');
        } elseif ($response->status === 422) {
            $this->command->error('  ‚Ä¢ Dados de valida√ß√£o inv√°lidos');
            if (isset($response->content->errors)) {
                foreach ($response->content->errors as $field => $errors) {
                    $this->command->error("  ‚Ä¢ {$field}: " . implode(', ', $errors));
                }
            }
        } elseif ($response->status === 409) {
            $this->command->warn('  ‚Ä¢ Admin j√° existe (email ou username duplicado)');
        } else {
            $this->command->error("  ‚Ä¢ Status: {$response->status}");
            $this->command->error('  ‚Ä¢ Mensagem: ' . ($response->content->message ?? 'Erro desconhecido'));
        }
    }

    /**
     * Definir perfis dos administradores
     */
    private function getAdminProfiles(): array
    {
        return [
            [
                'name' => 'Administrador Principal',
                'email' => 'admin@premiaplus.com',
                'username' => 'admin',
                'password' => 'password',
                'password_confirmation' => 'password',
                'phone' => '11999999999',
                'role' => 'admin',
            ],
            [
                'name' => 'Super Administrador',
                'email' => 'superadmin@premiaplus.com',
                'username' => 'superadmin',
                'password' => 'password',
                'password_confirmation' => 'password',
                'phone' => '11998888888',
                'role' => 'admin',
            ],
            [
                'name' => 'Administrador Financeiro',
                'email' => 'admin.financeiro@premiaplus.com',
                'username' => 'admin_financeiro',
                'password' => 'password',
                'password_confirmation' => 'password',
                'phone' => '11997777777',
                'role' => 'admin',
            ],
            [
                'name' => 'Administrador de Sistema',
                'email' => 'admin.sistema@premiaplus.com',
                'username' => 'admin_sistema',
                'password' => 'password',
                'password_confirmation' => 'password',
                'phone' => '11996666666',
                'role' => 'admin',
            ],
            [
                'name' => 'Administrador de Suporte',
                'email' => 'admin.suporte@premiaplus.com',
                'username' => 'admin_suporte',
                'password' => 'password',
                'password_confirmation' => 'password',
                'phone' => '11995555555',
                'role' => 'admin',
            ]
        ];
    }

    /**
     * Fazer login do admin principal
     */
    private function loginMainAdmin(): void
    {
        if (!$this->adminToken) {
            $this->command->warn('‚ö†Ô∏è Admin principal pode n√£o ter sido criado. Tentando login manual...');
        }

        $this->command->info('üîê Fazendo login do admin principal...');

        $data = [
            'email' => 'admin@premiaplus.com',
            'password' => 'password',
        ];

        try {
            $response = (new HttpClient())->apiRequest("{$this->baseUrl}/login", $data, [], 'POST');

            if ($response->status == 200) {
                $this->adminToken = $response->content->access_token ?? null;
                $this->command->info('‚úÖ Login do admin principal realizado!');
            } elseif ($response->status === 0) {
                $this->command->error('‚ùå Problema de conectividade no login - API n√£o est√° respondendo');
            } elseif ($response->status === 401) {
                $this->command->error('‚ùå Credenciais inv√°lidas - admin pode n√£o ter sido criado corretamente');
            } else {
                $this->command->error("‚ùå Erro no login (Status: {$response->status}): " . ($response->content->message ?? 'Erro desconhecido'));
            }
        } catch (\Exception $e) {
            $this->command->error("‚ùå Exce√ß√£o no login: {$e->getMessage()}");
        }
    }

    /**
     * Verificar configura√ß√£o dos admins
     */
    private function checkAdminsConfiguration(): void
    {
        if (!$this->adminToken) {
            $this->command->warn('‚ö†Ô∏è Token do admin principal n√£o dispon√≠vel');
            return;
        }

        $this->command->info('üîç Verificando configura√ß√£o dos administradores...');

        // Verificar admin principal
        $this->checkSingleAdminRole();

        // Testar login de todos os admins
        $this->testAllAdminsLogin();

        // Testar endpoints b√°sicos com privil√©gios de admin
        $this->testAdminEndpoints();
    }

    /**
     * Verificar role do admin principal
     */
    private function checkSingleAdminRole(): void
    {
        $headers = [
            'Authorization' => 'Bearer ' . $this->adminToken,
        ];

        $response = (new HttpClient())->apiRequest("{$this->baseUrl}/me", [], $headers, 'GET');

        if ($response->status == 200) {
            $userRole = $response->content->user->role ?? 'unknown';
            $userName = $response->content->user->name ?? 'unknown';
            $this->command->info("üë§ Admin principal: {$userName} | Role: {$userRole}");
            
            if ($userRole !== 'admin') {
                $this->command->warn('‚ö†Ô∏è Admin principal n√£o tem role de administrador!');
            } else {
                $this->command->info('‚úÖ Admin principal configurado corretamente!');
            }
        } else {
            $this->command->error('‚ùå Erro ao verificar role do admin principal');
        }
    }

    /**
     * Testar login de todos os admins criados
     */
    private function testAllAdminsLogin(): void
    {
        $this->command->info('üîê Testando login de todos os administradores...');

        $admins = $this->getAdminProfiles();
        $successfulLogins = 0;

        foreach ($admins as $admin) {
            $loginData = [
                'email' => $admin['email'],
                'password' => $admin['password'],
            ];

            $response = (new HttpClient())->apiRequest("{$this->baseUrl}/login", $loginData, [], 'POST');

            if ($response->status == 200) {
                $successfulLogins++;
                $this->command->line("  ‚úÖ {$admin['name']} - Login OK");
            } else {
                $this->command->line("  ‚ùå {$admin['name']} - Login Falhou");
            }

            // Pequena pausa entre testes
            usleep(150000); // 0.15 segundo
        }

        $totalAdmins = count($admins);
        $this->command->info("üìä Resultado: {$successfulLogins}/{$totalAdmins} administradores podem fazer login");
    }

    /**
     * Testar endpoints b√°sicos da API
     */
    private function testAdminEndpoints(): void
    {
        $this->command->info('üß™ Testando endpoints b√°sicos da API...');

        $endpoints = [
            ['GET', '/health', 'Health check'],
            ['GET', '/test', 'Test endpoint'],
        ];

        foreach ($endpoints as [$method, $endpoint, $description]) {
            $response = (new HttpClient())->apiRequest("{$this->baseUrl}{$endpoint}", [], [], $method);
            if ($response->status == 200) {
                $this->command->line("  ‚úÖ {$description} OK");
            } else {
                $this->command->line("  ‚ùå {$description} Falhou (Status: {$response->status})");
            }
        }

        // Testar endpoint autenticado
        if ($this->adminToken) {
            $headers = ['Authorization' => 'Bearer ' . $this->adminToken];
            $response = (new HttpClient())->apiRequest("{$this->baseUrl}/me", [], $headers, 'GET');
            
            if ($response->status == 200) {
                $this->command->line('  ‚úÖ Admin profile endpoint OK');
            } else {
                $this->command->line("  ‚ùå Admin profile endpoint Falhou (Status: {$response->status})");
            }
        }

        $this->command->info('üéØ Testes de endpoints conclu√≠dos!');
    }
}