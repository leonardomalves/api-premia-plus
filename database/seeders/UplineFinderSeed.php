<?php

namespace Database\Seeders;

use App\Models\User;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class UplineFinderSeed extends Seeder
{
    /**
     * Profundidade configur√°vel para buscar uplines
     */
    private $maxLevels = 3;
    
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('üîç Iniciando busca de uplines...');
        
        // Buscar todos os usu√°rios
        $users = User::where('uuid', '1868fb8c-d68a-469d-8eaf-1022a02657c7')->get();
        
        if ($users->isEmpty()) {
            $this->command->warn('‚ö†Ô∏è Nenhum usu√°rio encontrado. Execute primeiro o CreateUserSeed.');
            return;
        }
        
        $this->command->info("üë• Processando {$users->count()} usu√°rios...");
        
        foreach ($users as $user) {
            $this->findUplines($user);
        }
        
        $this->command->info('‚úÖ Busca de uplines conclu√≠da!');
    }
    
    /**
     * Busca uplines para um usu√°rio espec√≠fico
     */
    private function findUplines(User $user): void
    {
        $this->command->info("üë§ Usu√°rio: {$user->name} (ID: {$user->id})");
        
        if (!$user->sponsor_id) {
            $this->command->warn("   ‚ö†Ô∏è Sem patrocinador");
            return;
        }
        
        // Buscar uplines com profundidade configur√°vel
        $uplines = $this->getUplines($user, $this->maxLevels);
        
        if (empty($uplines)) {
            $this->command->warn("   ‚ö†Ô∏è Nenhum upline encontrado");
            return;
        }
        
        $this->command->info("   üìä Uplines encontrados: " . count($uplines));
        
        // Exibir cada upline
        foreach ($uplines as $level => $upline) {
            $this->command->info("   ‚Ü≥ N√≠vel " . ($level + 1) . ": {$upline->name} (ID: {$upline->id})");
        }
    }
    
    /**
     * Busca uplines com profundidade configur√°vel
     */
    private function getUplines(User $user, int $maxLevels): array
    {
        $uplines = [];
        $currentUser = $user;
        $level = 0;
        
        while ($level < $maxLevels && $currentUser->sponsor_id) {
            $sponsor = User::find($currentUser->sponsor_id);
            
            if (!$sponsor) {
                break;
            }
            
            $uplines[$level] = $sponsor;
            $currentUser = $sponsor;
            $level++;
        }
        
        return $uplines;
    }
    
    /**
     * Configura a profundidade m√°xima de uplines
     */
    public function setMaxLevels(int $levels): self
    {
        $this->maxLevels = $levels;
        return $this;
    }
    
    /**
     * Exibe estat√≠sticas dos uplines
     */
    public function showStatistics(): void
    {
        $this->command->info('üìà Estat√≠sticas de Uplines:');
        
        $totalUsers = User::count();
        $usersWithSponsors = User::whereNotNull('sponsor_id')->count();
        
        $this->command->info("   - Total de usu√°rios: {$totalUsers}");
        $this->command->info("   - Usu√°rios com patrocinador: {$usersWithSponsors}");
        $this->command->info("   - Profundidade configurada: {$this->maxLevels} n√≠veis");
        
        // Contar usu√°rios por n√≠vel de upline
        $this->countUplineLevels();
    }
    
    /**
     * Conta usu√°rios por n√≠vel de upline
     */
    private function countUplineLevels(): void
    {
        $this->command->info('üìä Distribui√ß√£o por n√≠veis:');
        
        $users = User::whereNotNull('sponsor_id')->get();
        $levelCounts = [];
        
        foreach ($users as $user) {
            $uplines = $this->getUplines($user, $this->maxLevels);
            $levelCount = count($uplines);
            
            if (!isset($levelCounts[$levelCount])) {
                $levelCounts[$levelCount] = 0;
            }
            $levelCounts[$levelCount]++;
        }
        
        for ($i = 1; $i <= $this->maxLevels; $i++) {
            $count = $levelCounts[$i] ?? 0;
            $this->command->info("   - {$i} n√≠vel(is): {$count} usu√°rios");
        }
    }
}
